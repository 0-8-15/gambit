(include "#.scm")

;;; These tests come from coverage statistics for part of _num.scm

(check-tail-exn type-exception? (lambda () (finite? 'a)))
(check-tail-exn type-exception? (lambda () (finite? +1+0.i)))
(check-eqv? (finite? 1) #t)
(check-eqv? (finite? 11111111111111111111111111111111) #t)
(check-eqv? (finite? 2/3) #t)
(check-eqv? (finite? 1.0) #t)
(check-eqv? (finite? +nan.0) #f)
(check-eqv? (finite? +inf.0) #f)
(check-eqv? (finite? -inf.0) #f)

(check-tail-exn type-exception? (lambda () (infinite? 'a)))
(check-tail-exn type-exception? (lambda () (infinite? +1+0.i)))
(check-eqv? (infinite? 1) #f)
(check-eqv? (infinite? 11111111111111111111111111111111) #f)
(check-eqv? (infinite? 2/3) #f)
(check-eqv? (infinite? 1.0) #f)
(check-eqv? (infinite? +nan.0) #f)
(check-eqv? (infinite? +inf.0) #t)
(check-eqv? (infinite? -inf.0) #t)

(check-eqv? (number? 'a) #f)
(check-eqv? (number? +1+0.i) #t)
(check-eqv? (number? 1) #t)
(check-eqv? (number? 11111111111111111111111111111111) #t)
(check-eqv? (number? 2/3) #t)
(check-eqv? (number? 1.0) #t)
(check-eqv? (number? +nan.0) #t)
(check-eqv? (number? +inf.0) #t)
(check-eqv? (number? -inf.0) #t)

(check-eqv? (real? 'a) #f)
(check-eqv? (real? +1+0.i) #f)
(check-eqv? (real? 1) #t)
(check-eqv? (real? 11111111111111111111111111111111) #t)
(check-eqv? (real? 2/3) #t)
(check-eqv? (real? 1.0) #t)
(check-eqv? (real? +nan.0) #t)
(check-eqv? (real? +inf.0) #t)
(check-eqv? (real? -inf.0) #t)

#|

(check-eqv? (? 'a) #f)
(check-eqv? (? +1+0.i) #f)
(check-eqv? (? 1) #t)
(check-eqv? (? 11111111111111111111111111111111) #t)
(check-eqv? (? 2/3) #t)
(check-eqv? (? 1.0) #t)
(check-eqv? (? +nan.0) #t)
(check-eqv? (? +inf.0) #t)
(check-eqv? (? -inf.0) #t)
|#

(check-eqv? (rational? 'a) #f)
(check-eqv? (rational? +1+0.i) #f)
(check-eqv? (rational? 1) #t)
(check-eqv? (rational? 11111111111111111111111111111111) #t)
(check-eqv? (rational? 2/3) #t)
(check-eqv? (rational? 1.0) #t)
(check-eqv? (rational? +nan.0) #f)
(check-eqv? (rational? +inf.0) #f)
(check-eqv? (rational? -inf.0) #f)

(check-eqv? (integer? 'a) #f)
(check-eqv? (integer? +1+0.i) #f)
(check-eqv? (integer? 1) #t)
(check-eqv? (integer? 11111111111111111111111111111111) #t)
(check-eqv? (integer? 2/3) #f)
(check-eqv? (integer? 1.0) #t)
(check-eqv? (integer? 0.5) #f)
(check-eqv? (integer? +nan.0) #f)
(check-eqv? (integer? +inf.0) #f)
(check-eqv? (integer? -inf.0) #f)

(check-tail-exn type-exception? (lambda () (exact? 'a)))
(check-eqv? (exact? +1+0.i) #f)
(check-eqv? (exact? 1) #t)
(check-eqv? (exact? 11111111111111111111111111111111) #t)
(check-eqv? (exact? 2/3) #t)
(check-eqv? (exact? 1.0) #f)
(check-eqv? (exact? +nan.0) #f)
(check-eqv? (exact? +inf.0) #f)
(check-eqv? (exact? -inf.0) #f)

(check-tail-exn type-exception? (lambda () (= 1 'a)))
(check-tail-exn type-exception? (lambda () (= 'a 1)))
(check-eqv? (= 1 +1+0.i) #t)
(check-eqv? (= (expt 2. 100) (expt 2 100)) #t)
(check-eqv? (= (+ 1/3 1/3) 2/3) #t)
(check-eqv? (= 1.0 1) #t)
(check-eqv? (= +nan.0 1) #f)
(check-eqv? (let ((x +nan.0)) (= x x)) #f)
(check-eqv? (= +inf.0 +inf.0) #t)
(check-eqv? (= -inf.0 -inf.0) #t)
(check-eqv? (= (- +inf.0) -inf.0) #t)

(check-tail-exn type-exception? (lambda () (= 1 'a)))
(check-tail-exn type-exception? (lambda () (= 'a 1)))
(check-eqv? (+ 1 1) 2)
(check-eqv? (let ((x (- (* 3 (quotient ##min-fixnum 4)))))
	      (+ x x))
	    (* 3 (- (quotient ##min-fixnum 2))))

(check-tail-exn type-exception? (lambda () (square 'a)))
(check-eqv? (square 3) 9)
(check-eqv? (square (expt 2 1000)) (expt 2 2000))
(check-eqv? (square 2/3) 4/9)
(check-eqv? (square 0.25) 0.0625)
(check-=    (square 0.25+.125i) .046875+.0625i)
(check-eqv? (square +inf.0+inf.0i) 0.+inf.0i)

(check-tail-exn type-exception? (lambda () (sqrt 'a)))
(check-eqv? (sqrt 16) 4)
(check-eqv? (sqrt (expt 3 100)) (expt 3 50))
(check-eqv? (sqrt 4/9) 2/3)
(check-eqv? (sqrt 4.0) 2.0)
(check-eqv? (sqrt +2.0i) 1.0+1.0i)
(check-eqv? (sqrt -2.0i) 1.-1.i)
(check-eqv? (sqrt (+ (expt 2 1000) 1)) (expt 2. 500))
(check-eqv? (sqrt (+ (expt 3 60) 1)) 2.05891132094649e14)

(check-tail-exn type-exception? (lambda () (abs 'a)))
(check-eqv? (abs -1) 1)
(check-eqv? (abs 1) 1)
(check-eqv? (abs (- (expt 3 100))) (expt 3 100))
(check-eqv? (abs (expt 3 100)) (expt 3 100))
(check-eqv? (abs 2/3) 2/3)
(check-eqv? (abs -2/3) 2/3)
(check-eqv? (abs -1.) 1.)
(check-eqv? (abs 1.) 1.)
(check-tail-exn type-exception? (lambda () (abs 12.+5.i)))
(check-tail-exn type-exception? (lambda () (abs 12+5i)))

(check-tail-exn type-exception? (lambda () (magnitude 'a)))
(check-eqv? (magnitude -1) 1)
(check-eqv? (magnitude 1) 1)
(check-eqv? (magnitude (- (expt 3 100))) (expt 3 100))
(check-eqv? (magnitude (expt 3 100)) (expt 3 100))
(check-eqv? (magnitude 2/3) 2/3)
(check-eqv? (magnitude -2/3) 2/3)
(check-eqv? (magnitude -1.) 1.)
(check-eqv? (magnitude 1.) 1.)
(check-eqv? (magnitude 12.+5.i) 13.)
(check-eqv? (magnitude 12+5i) 13)

(check-eqv? (log (expt 2 10000)) (* 10000 (log 2)))
(check-eqv? (log +inf.0+0.0i) +inf.0+0.i)
(check-eqv? (log -inf.0+0.0i) (+ +inf.0 (log -1.0)))

(check-eqv? (atan +nan.0 0) +nan.0)
(check-eqv? (atan 0 +nan.0) +nan.0)
(check-eqv? (atan 2 0) (macro-inexact-+pi/2))
(check-eqv? (atan +inf.0 +inf.0) (macro-inexact-+pi/4))
(check-eqv? (atan -inf.0 +inf.0)  (- (macro-inexact-+pi/4)))
(check-eqv? (atan (expt 3 10000) (expt 3 10000)) (macro-inexact-+pi/4))

(check-eqv? (expt -4 1/2) +2i)
(check-eqv? (expt -4. 1/2) +2.i)
(check-eqv? (expt -4 3/2) -8i)
(check-eqv? (expt -4. 3/2) -8.i)
(check-eqv? (expt -8 1/3) (* 2 (macro-cpxnum-+1/2+sqrt3/2i)))
(check-eqv? (expt -8 2/3) (* 4 (macro-cpxnum--1/2+sqrt3/2i)))
(check-eqv? (expt -8 4/3) (* 16 (macro-cpxnum--1/2-sqrt3/2i)))
(check-eqv? (expt -8 5/3) (* 32 (macro-cpxnum-+1/2-sqrt3/2i)))
(check-eqv? (expt -64 1/6) (* 2 (macro-cpxnum-+sqrt3/2+1/2i)))
(check-eqv? (expt -64 5/6) (* 32 (macro-cpxnum--sqrt3/2+1/2i)))
(check-eqv? (expt -64 7/6) (* 128 (macro-cpxnum--sqrt3/2-1/2i)))
(check-eqv? (expt -64 11/6) (* 2048 (macro-cpxnum-+sqrt3/2-1/2i)))
(check-eqv? (expt 100 -1/4) (/ (sqrt (sqrt 100))))
(check-eqv? (expt 100/81 -1/4) (/ 3 (sqrt (sqrt 100))))

(pp 'test-bitwise-ior)

(check-tail-exn type-exception? (lambda () (bitwise-ior 1 'a)))
(check-tail-exn type-exception? (lambda () (bitwise-ior 'a 1)))
(check-eqv? (bitwise-ior 123443 17042360) (test-bitwise-ior 123443 17042360))
(check-eqv? (bitwise-ior 123443 902345798234656542928345617042360)
	    (test-bitwise-ior 123443 902345798234656542928345617042360))
(check-eqv? (bitwise-ior -123443 17042360) (test-bitwise-ior -123443 17042360))
(check-eqv? (bitwise-ior -123443 902345798234656542928345617042360)
	    (test-bitwise-ior -123443 902345798234656542928345617042360))
(check-eqv? (bitwise-ior 123443 -17042360)
	    (test-bitwise-ior 123443 -17042360))
(check-eqv? (bitwise-ior 123443 -902345798234656542928345617042360)
	    (test-bitwise-ior 123443 -902345798234656542928345617042360))
(check-eqv? (bitwise-ior -123443 -17042360)
	    (test-bitwise-ior -123443 -17042360))
(check-eqv? (bitwise-ior -123443 -902345798234656542928345617042360)
	    (test-bitwise-ior -123443 -902345798234656542928345617042360))
(check-eqv? (bitwise-ior 34572348562304523465432065423 234532485620943562345234958634)
	    (test-bitwise-ior 34572348562304523465432065423 234532485620943562345234958634))
(check-eqv? (bitwise-ior -34572348562304523465432065423 234532485620943562345234958634)
	    (test-bitwise-ior -34572348562304523465432065423 234532485620943562345234958634))
(check-eqv? (bitwise-ior 34572348562304523465432065423 -234532485620943562345234958634)
	    (test-bitwise-ior 34572348562304523465432065423 -234532485620943562345234958634))
(check-eqv? (bitwise-ior -34572348562304523465432065423 -234532485620943562345234958634)
	    (test-bitwise-ior -34572348562304523465432065423 -234532485620943562345234958634))
(check-eqv? (bitwise-ior  902345798234656542928345617042360 123443)
	    (test-bitwise-ior  902345798234656542928345617042360 123443))

(pp 'test-bitwise-and)

(check-tail-exn type-exception? (lambda () (bitwise-and 1 'a)))
(check-tail-exn type-exception? (lambda () (bitwise-and 'a 1)))
(check-eqv? (bitwise-and 123443 17042360) (test-bitwise-and 123443 17042360))
(check-eqv? (bitwise-and 123443 902345798234656542928345617042360)
	    (test-bitwise-and 123443 902345798234656542928345617042360))
(check-eqv? (bitwise-and -123443 17042360) (test-bitwise-and -123443 17042360))
(check-eqv? (bitwise-and -123443 902345798234656542928345617042360)
	    (test-bitwise-and -123443 902345798234656542928345617042360))
(check-eqv? (bitwise-and 123443 -17042360)
	    (test-bitwise-and 123443 -17042360))
(check-eqv? (bitwise-and 123443 -902345798234656542928345617042360)
	    (test-bitwise-and 123443 -902345798234656542928345617042360))
(check-eqv? (bitwise-and -123443 -17042360)
	    (test-bitwise-and -123443 -17042360))
(check-eqv? (bitwise-and -123443 -902345798234656542928345617042360)
	    (test-bitwise-and -123443 -902345798234656542928345617042360))
(check-eqv? (bitwise-and 34572348562304523465432065423 234532485620943562345234958634)
	    (test-bitwise-and 34572348562304523465432065423 234532485620943562345234958634))
(check-eqv? (bitwise-and -34572348562304523465432065423 234532485620943562345234958634)
	    (test-bitwise-and -34572348562304523465432065423 234532485620943562345234958634))
(check-eqv? (bitwise-and 34572348562304523465432065423 -234532485620943562345234958634)
	    (test-bitwise-and 34572348562304523465432065423 -234532485620943562345234958634))
(check-eqv? (bitwise-and -34572348562304523465432065423 -234532485620943562345234958634)
	    (test-bitwise-and -34572348562304523465432065423 -234532485620943562345234958634))
(check-eqv? (bitwise-and  902345798234656542928345617042360 123443)
	    (test-bitwise-and  902345798234656542928345617042360 123443))


(pp 'test-bitwise-xor)

(check-tail-exn type-exception? (lambda () (bitwise-xor 1 'a)))
(check-tail-exn type-exception? (lambda () (bitwise-xor 'a 1)))
(check-eqv? (bitwise-xor 123443 17042360) (test-bitwise-xor 123443 17042360))
(check-eqv? (bitwise-xor 123443 902345798234656542928345617042360)
	    (test-bitwise-xor 123443 902345798234656542928345617042360))
(check-eqv? (bitwise-xor -123443 17042360) (test-bitwise-xor -123443 17042360))
(check-eqv? (bitwise-xor -123443 902345798234656542928345617042360)
	    (test-bitwise-xor -123443 902345798234656542928345617042360))
(check-eqv? (bitwise-xor 123443 -17042360)
	    (test-bitwise-xor 123443 -17042360))
(check-eqv? (bitwise-xor 123443 -902345798234656542928345617042360)
	    (test-bitwise-xor 123443 -902345798234656542928345617042360))
(check-eqv? (bitwise-xor -123443 -17042360)
	    (test-bitwise-xor -123443 -17042360))
(check-eqv? (bitwise-xor -123443 -902345798234656542928345617042360)
	    (test-bitwise-xor -123443 -902345798234656542928345617042360))
(check-eqv? (bitwise-xor 34572348562304523465432065423 234532485620943562345234958634)
	    (test-bitwise-xor 34572348562304523465432065423 234532485620943562345234958634))
(check-eqv? (bitwise-xor -34572348562304523465432065423 234532485620943562345234958634)
	    (test-bitwise-xor -34572348562304523465432065423 234532485620943562345234958634))
(check-eqv? (bitwise-xor 34572348562304523465432065423 -234532485620943562345234958634)
	    (test-bitwise-xor 34572348562304523465432065423 -234532485620943562345234958634))
(check-eqv? (bitwise-xor -34572348562304523465432065423 -234532485620943562345234958634)
	    (test-bitwise-xor -34572348562304523465432065423 -234532485620943562345234958634))
(check-eqv? (bitwise-xor  902345798234656542928345617042360 123443)
	    (test-bitwise-xor  902345798234656542928345617042360 123443))

(pp 'test-gcd)

(check-tail-exn type-exception? (lambda () (gcd 1 'a)))
(check-tail-exn type-exception? (lambda () (gcd 'a 1)))
(check-tail-exn type-exception? (lambda () (gcd 3/2 1)))
(check-tail-exn type-exception? (lambda () (gcd 1 3/2)))
(check-eqv? (gcd (expt 3 100) (expt 5 100)) 1)
(check-eqv? (gcd (expt 3 10000) (expt 5 10000)) 1)
(check-eqv? (gcd (expt 3 100000) (expt 5 100000)) 1)
(check-eqv? (gcd (expt 3. 30) (expt 5. 30)) 1.)
(check-eqv? (gcd (expt 3 30) (expt 5. 30)) 1.)
(check-eqv? (gcd (expt 3. 30) (expt 5 30)) 1.)

(pp 'test-*)

(check-eqv? (expt 15 10000000) (* (expt 3 10000000) (expt 5 10000000)))

(pp 'test-round)

